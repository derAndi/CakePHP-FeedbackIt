<?php

$config = array(
	'FeedbackIt' => array(

		'method'            => 'filesystem',	//Options: filesystem, mantis, mail, github
		'secondarymethod'	=> '',	//the secondarymethod won't be checked for errors. No feedback for the user.
		'returnlink'        => true,	//Return a link (if any) to the created ticket or report.
		'enablecopybyemail' => true, //If set to true, visitors can check a 'send me a copy' button

		'enableacceptterms' => true, //If set to true, visitors have to check an accept terms checkbox
		'termstext'         => 'When you submit, a screenshot (of only this website) will be taken to aid us in processing your feedback or bugreport.', //The text to display on the terms button

		'forceauthusername' => false, //If set to true, the AuthComponent::user('name') var or equivalent is made un-editable in the form
		'forceemail'        => true, //If set to true, the AuthComponent::user('email') var or equivalent is made un-editable in the form

		/*
		Configure the different methods
		 */
	    'methods' => array(

	        'filesystem' => array(
	        	'location'=> APP.'tmp'.DS.'feedbackit'.DS, //Default is APP/tmp/feedbackit/
	    	),

	    	'mantis' => array(
	        	'api_url'=> 'http://example.com/api/soap/mantisconnect.php?wsdl', //Api url
	        	'username'=> 'foo', //The Mantis user to use
	        	'password'=> 'bar', //The password of the above Mantis user
	        	'project_id'=> 1, //Set the project id of the project to put this feedback in
	        	'category'=> 'General', //Default Mantis category
	        	'decodeimage'=> true, //Decode image or not (Seems to differ in different Mantis versions?)
  	
	        	'http_username' => false, //Optional username for HTTP auth, use false if not used
	        	'http_password' => false //Option password for HTTP auth, use false if not used
	    	),
	    	
	        'mail' => array(
	        	'to'=> 'foo@example.com',
	        	'from'=> array('noreply@'.$_SERVER['HTTP_HOST'] => 'FeedbackIt mailer'),
	    	),

	        'github' => array(
	        	'api_url'=> 'https://api.github.com/repos/<username>/<repo>/issues', //Github Api url (http://developer.github.com/v3/issues/#create-an-issue)
	        	'username'=> 'foo', //The Github user to use (must have pull access to repo)
	        	'password'=> 'bar', //The password of the above Github user

	        	'localimagestore' => false, //WARNING: When set to true, screenshot image will be stored to the public webroot directory of this plugin
	    	),
	    	'bitbucket' => array(
				'api_url'=> 'https://bitbucket.org/api/1.0/repositories/<accountname>/<repo_slug>/issues', //Bitbucket Api url (https://confluence.atlassian.com/display/BITBUCKET/issues+Resource#issuesResource-POSTanewissue)
				'username'=> 'foo', //The Bitbucket user to use (must have pull access to repo)
				'password'=> 'bar', //The password of the above Bitbucket user

				'localimagestore' => true, //WARNING: When set to true, screenshot image will be stored to the public webroot directory of this plugin
			),
	    )
	)    
);
